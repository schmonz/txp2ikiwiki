# txp2ikiwiki

As the maintainer of my website. I want to [migrate it to
ikiwiki](http://www.schmonz.com/2013/05/27/remembering-textpattern) in
a way I can trust, so that I'm more likely to do it.

As an ikiwiki committer, I want migrating to ikiwiki to be easy,
so that others are more likely to do it.

Therefore, I want an automated conversion tool that

- can import Textpattern sites, starting with mine
- can be included with the ikiwiki distribution
- can be easily extended to import from other CMSes

## How about `jekyll-import`?

[Jekyll](http://jekyllrb.com) manages static content (much like
ikiwiki) and has [lots of importers](http://import.jekyllrb.com/).
If the output of `jekyll-import` were satisfactory, such that we
could simply postprocess it a bit, then we could gain an import
path from many CMSes for very little effort, leaving maintenance
of all those importers to the popular kids. Unfortunately, the
output isn't satisfactory. For instance, Jekyll has no comment
feature, so its importers generally make no attempt to preserve
comments.

## Okay, so `ikiwiki-import`

### Preconditions

- Your website is in Textpattern, configured sufficiently like mine
- You've used ikiwiki before, and you want it for your site
- You have ikiwiki installed now
- You can prevent anyone from changing your old site until you're done
- You understand the instructions in <http://ikiwiki.info/setup/byhand/>
- You'll want a chance to manually tweak templates and site config
- You'll decide when and how to flip the switch for your site

### Must-haves

- No surprises
- Automatic (except where that might conceal surprises)
- Communicative
    - Shows what has been done (perhaps as passing tests)
    - Shows what hasn't been done (perhaps as failing tests)
    - Explains what is left to be done manually

-----

# A spec for my website

If my site were just a bunch of pages, I'd know what it does, and
I'd be able to tell whether the converted site did the same things.
It's not, so I don't, and I can't. Plus, some of what it does is
RSS and podcasts, and I'm sure I'd like to not flood aggregators.
So I'm going to start by figuring out as much as I can about what
my website currently does.

I'm going to describe each feature in
[Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin)-inflected
English, and I'm going to write the corresponding [step
definitions](https://github.com/cucumber/cucumber/wiki/Step-Definitions) in
Perl with the help of
[Test::BDD::Cucumber](http://search.cpan.org/dist/Test-BDD-Cucumber/). The
step definitions may need to be implemented differently for Textpattern
and for ikiwiki; the feature definitions shouldn't need to change
at all. I bet this'll be a fun way to work.

Properties to be preserved:

- URL structure
- Content
- Feeds
- Appearance

Properties to be gleefully jettisoned:

- Apache
- MySQL
- PHP

## Test mechanics

### Can I describe features for more specific personas?

- As a parent
- As a friend
- As a professional software developer
- As a potential consulting client

### Can I get `vim` to help me write for Cucumber?

When Python `behave` and Ruby `cucumber` were installed, `vim`
showed `>>` in the gutter for some lines. What was that trying to
help me with? Can I get it to help me with Perl `Test::BDD::Cucumber`?

> It's trying to show me where step definitions are missing. Would be
> nice to teach it about the Cucumber implementation I'm using.

## Can I rename `step_definitions` to `steps`?

I think I just like it better. To make the change safely, I have to
compare output from `prove -v` before and after.

## Can I get `prove` to fail when steps are missing?

Right now I have to look carefully through `prove -v`. Should I
want to be running `pherkin` instead?

## Can I store `steps` elsewhere?

I might prefer them next to `features`. But only if that's common
in Greater Cucumberland.

## Can I test one feature at a time?

- With `pherkin`, yes
- With `prove`?
