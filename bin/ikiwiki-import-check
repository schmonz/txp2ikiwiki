#!/usr/pkg/bin/perl

use warnings;
use strict;
use utf8;

package IkiWiki::Import::Check;

use Test::More;

use Text::Diff;
use IPC::Open2;

use IkiWiki;

sub remove_unimportant_txp_differences {
	my ($html) = @_;

	# anything before or after the article body
	$html =~ s|^.+?<p>|<p>|s;
	$html =~ s|<div id="comments">.+$||s;
	$html =~ s|(.+)</p>.+|$1</p>|s;

	# paragraph-leading whitespace
	$html =~ s|^(\s)*<p>|<p>|msg;

	# any leading or trailing whitespace
	$html =~ s|^(\s)*||msg;
	$html =~ s|(\s)*$||msg;

	# blockquotes
	$html =~ s|<blockquote>\n<p>|<blockquote><p>|msg;
	$html =~ s|</p>\n</blockquote>|</p></blockquote>|msg;

	# blank lines
	$html =~ s|^$||msg;

	# accented characters
	$html =~ s|á|&aacute;|msg;
	$html =~ s|à|&agrave;|msg;
	$html =~ s|é|&eacute;|msg;
	$html =~ s|ç|&ccedil;|msg;
	$html =~ s|Ø|&Oslash;|msg;
	$html =~ s|ö|&ouml;|msg;

	# smart apostrophes
	$html =~ s|&#8217;|'|msg;
	$html =~ s|&#039;|'|msg;
	$html =~ s|&#39;|'|msg;
	$html =~ s|’|'|msg;

	# smart double-quotes
	$html =~ s|&#8220;|"|msg;
	$html =~ s|&#8221;|"|msg;

	# smart em-dashes
	$html =~ s|&#8212;|--|msg;

	# smart ellipses
	$html =~ s|&#8230;|...|msg;

	# URL-escapes
	$html =~ s|%2B|+|msg;
	$html =~ s|%2C|,|msg;
	$html =~ s|%28|(|msg;
	$html =~ s|%29|)|msg;
	$html =~ s|%C3%B6|&amp;ouml;|msg;

	# don't care about caps that much
	$html =~ s|<span class="caps">(.+?)</span>|$1|msg;

	# one particular weird image tag
	$html =~ s|images/28\.jpg" alt=".+width="472"|images/28.jpg" alt="XXX fixed quotes in live site, try again later" width="472"|msg;

	return $html . "\n";
}

sub remove_unimportant_iki_differences {
	my ($html) = @_;

	# anything before or after the article body
	$html =~ s|^.+<div id="content">\n<p><br />\n</p>\n\n<p><br />\n</p>\n\n<p><br />\n<br />\n</p>\n\n\n\n||s;
	$html =~ s|</p>\n</div>.+|</p>|s;

	# paragraph-leading whitespace
	$html =~ s|^(\s)*<p>|<p>|msg;

	# any leading or trailing whitespace
	$html =~ s|^(\s)*||msg;
	$html =~ s|(\s)*$||msg;

	# blank lines
	$html =~ s|^$||msg;

	# weirdness around span tags
	$html =~ s| </span>|</span> |msg;
	$html =~ s|,</span>|</span>,|msg;
	$html =~ s|\.</span>|</span>.|msg;

	# don't care about caps that much
	$html =~ s|<span class="caps">(.+?)</span>|$1|msg;

	# one particular weird image tag
	$html =~ s|images/28\.jpg" alt=".+width="472"|images/28.jpg" alt="XXX fixed quotes in live site, try again later" width="472"|msg;

	# smart apostrophes
	$html =~ s|&#39;|'|msg;
	$html =~ s|&rsquo;|'|msg;

	return $html . "\n";
}

sub get_txp_post_body {
	my ($relative_permalink) = @_;
	my $file = "www.schmonz.com/$relative_permalink/index.html";
	return "MISSING FILE: $file" unless -f $file;
	return remove_unimportant_txp_differences(readfile($file));
}

sub get_iki_post_body {
	my ($relative_permalink) = @_;
	my $file = "outly/$relative_permalink/index.html";
	return "MISSING FILE: $file" unless -f $file;
	return remove_unimportant_iki_differences(readfile($file));
}

sub _colorize_diff {
	my ($diff) = @_;

	my $pid = eval { open2(*IN, *OUT, "colordiff") };
	return $diff if ($@);

	binmode(IN, ':utf8');
	binmode(OUT, ':utf8');
	print OUT $diff;
	close OUT;
	local $/ = undef;
	my $colordiff = <IN>;
	close IN;
	waitpid $pid, 0;

	return $colordiff;
}

sub diff_ok {
	my ($old, $new, $description) = @_;
	my $diff = diff \$old, \$new;
	if (q{} eq $diff) {
		pass($description);
	} else {
		fail($description);
		diag(_colorize_diff($diff));
	}
}

sub main {
	my @permalinks = @_;
	for my $permalink (@permalinks) {
		diff_ok(
			get_txp_post_body($permalink),
			get_iki_post_body($permalink),
			qq{old and new $permalink are similar enough},
		);
	}
}

main(@ARGV);
done_testing();
