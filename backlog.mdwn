# Backlog

## Posts: serialize matching permalinks

- Feed in Textpattern's timezone setting:
    - SELECT * FROM txp_prefs WHERE name like '%time%'
- Feed in Textpattern's configured permalink format:
    - SELECT * FROM txp_prefs WHERE name like '%permalink%'
- Write some LWP to check that my new permalinks match my live ones
    - Run it over every 2014 post
    - Repeat, a year at a time, until satisfied
    - (Stash it in the step definitions or something)

## Posts: ikiformat excerpts

    [[!more linktext="Read more..." text="""
    $excerpt
    """]]

## Posts: normalize `<txp:foo />` tags

- Bail out for a tag we don't recognize
- Recognize `<txp:article_image />`
    - Compute the URL where it lives and the corresponding local path
    - Fetch it from live site to local path
    - Replace the tag with whatever exactly it does
    - Optionally don't do the fetching
    - Document that by default we'll hit the network and the live
      source site to fetch any referenced content stored as files
      outside the database (such as images or podcast enclosures)
- Recognize <txp:image />
    - Same stuff (look in `txp_image` table)
- Recognize `tru_podcast` tags:
    - <txp:tru_podcast_link linktext="important data" />
    - `SELECT * FROM txp_prefs WHERE val='tru_podcast'`
    - `txp_file`

## Posts: normalize and ikiformat meta tags

- author
- keywords
- permalink (if different from the URL generated by ikiwiki)
- enclosure (for podcasts)
- redir (for HTTP redirects)
- guid (a URI, used instead of page URL in RSS/Atom feeds)
- updated (a fake mod time, to avoid flooding aggregators)

# Posts: normalize tag tags

- Categories: schema has Category1 and Category2
- Keywords: intended to hold tags (so `tru_tags` uses it)
    - Stored as comma-separated in MySQL
    - Each tag may contain quotes, spaces, wacky non-ASCII characters
- When I think I've done it right, get Nathan's test `tru_tags` database

# Posts: some aren't supposed to be visible

- `{ 1 => draft, 2 => hidden, 3 => pending, 4 => live, 5 => sticky }`
- What should we do with drafts? hidden? pending?
- What about posts whose creation_date is in the future?
- What about posts whose expiration_date is in the past?

## Comments: normalize

- Metadata
    - ID
    - visible
    - title ("subject")
    - author name
    - author email
    - author website
    - creation date
    - modification date
    - posting IP
    - text format
    - text encoding
- Data
    - body
- pass into NormalizedPost->new()

## Comments: ikiformat-and-serialize

- Render HTML from one becommented post
    - (and maybe one unbecommented post)
- Inspect HTML for signs of expected comments
- Give `ikiwiki-comment` optional params: format, username, subject, date...
- Let `ikiwiki-comment` optionally take content on `<STDIN>`
- Pipe each comment body to `ikiwiki-comment`
- Good enough? Or try to pass ikiformatted into `ikiwiki-comment`?

## Comments: ikiformat, then serialize

- If happy with previous, maybe don't bother with this
- In `ikiwiki-comment`, extract compute-unique-filename method
- Move method to `IkiWiki::Plugin::comments`
- Do my own ikiformatting
- Load the plugin, call the method, `writefile()` into it

## Comments: inspect rendered HTML post

- Is post content followed by its comments, oldest to newest?
- Is each comment's HTML identical to what came out of the database?
- Does the metadata match up with Textpattern's display?

## Setup: what if someone is going to want `usedirs: 0`?

We should let them say so, then adjust our output accordingly.
Instead, we make the implicit assumption that we know the default
value a new site gets (`usedirs: 1`). For the following settings,
at least make our assumptions about their default values explicit
in the code:

    usedirs
    prefix_directives
    indexpages
    include
    exclude
    wiki_file_chars

## Setup: use all available Textpattern settings

- "Site name" -> wikiname
- "Site slogan" -> site summary or description in feeds
- "Time zone" -> timezone
- "Date format" -> timeformat (maybe? where is this used in Txp, in ikiwiki?)
- "Archive date format" -> timeformat (also?)
- "Permanent link mode" -> file paths in srcdir
- "Doctype" -> html5
- "Accept comments?" -> comments_pagespec
- "Comments on by default?" -> comments_pagespec
- "Default comments invite" -> the COMMENTSLINK template variable
- "Moderate comments?" -> moderate_pagespec
- "Comments disabled after" -> comments_closed_pagespec (and probably `cron`)
- "Comments date format" -> timeformat (also?)
- "Image directory" -> where to export images
- "SMTP envelope sender address" -> adminemail
- article "categories" -> tags (but also /category/foo inlines, right?)
- remember to set cgiurl and other cgi settings
- "Spam blocklists" -> blogspam_server
- "Custom fields" -> recognize tru_podcast, bail on anything else
- "Syndicate article excerpt only?" -> feed contains just the excerpt
- "How many articles should be included in feeds?" -> inline show=""
- "Include email in Atom feeds?" -> maybe we just always do this, or don't
- "Use email address to construct feed IDs (default is site URL)?" -> GUIDs
- "Attach titles to permalinks?" -> file names
- "Publish expired articles?" -> mark somehow in metadata
- "Ping pingomatic.com?" -> pingurl
- "Ping textpattern.com?" -> pingurl
- "Use plugins?" -> list the active ones
- "Use admin-side plugins?" -> list the active ones
- "Allow PHP in pages?" -> remember to enable PHP for your ikiwiki destdir
- "Allow PHP in articles?" -> remember to enable PHP for your ikiwiki destdir

## Setup: `ikiwiki --changesetup` additional reasonable defaults

    add_plugins:
    - blogspam
    - calendar
    - comments
    - highlight (if needed)
    - inline
    - moderatedcomments
    - pagestats
    - search
    - sidebar
    - tag
    - textile
    - typography
    disable_plugins:
    - editpage
    - recentchanges
    allowrss: 1
    allowatom: 1
    omega_cgi: /path/to/xapian-omega
    tagbase: probably "tag"

## Sections: decide what to do about them

- my site does have a couple sections

## Implementation: compare `jekyll-import`'s Textpattern importer

- `lib/jekyll-import/importers/textpattern.rb`

## Implementation: see what's still wrong with my imported site

- Use that LWP script to auto-compare destdir and live Textpattern
- Known problem: Textile is double-encoding HTML entities
    - `t/textile-double-escape-bug.t`
- Known (possibly related) problem: I don't understand text encoding

## Design: add Jekyll as a source (3/4-assed)

- Goal: fix existing code (_not_ import Jekyll like a champ)
- In tests:
    - Stop hardcoding values from a specific Textpattern post
    - Stop hardcoding real MySQL crap
        - Parameterize DBI driver (only tests can, not users)
        - Prepare representative data as DBD::CSV (or maybe DBD::SQLite)
        - Uninstall DBD::mysql to make sure it all works right
- In data source:
    - No database (instead, files)
    - No single input format (instead, multiple formats)
    - No comments (ever)

## Docs: how to add a new source?

- (TDD: read through `t/import.t`, add and/or adjust tests)
- Add a (human-name, class-name) entry to the list of sources
- Define your class as a subclass of  `IkiWiki::Import::Source`
- Try importing and fix errors until you have some output
- Keep importing and fix implementation until you like the output
- Share your work

## Docs: what doesn't get imported?

- Revision history (Textpattern doesn't have that)
- User database (I didn't need that)
- Templates and styles (that's on you)
- How many posts were you expecting? How many comments? Did we get them all?

## Docs: `ikiwiki-import(1)`

- Install man page
- xref it from elsewhere
- Write it

## Docs: docwiki

- <http://ikiwiki.info/convert/>

## Docs: legalisms

- Provide copyright notice
- Choose and define license

## Upstream: before pushing
- Get rid of `Params::Validate`
- Make sure remaining dependencies are not always loaded (only where needed)
- Run `perlcritic` with ikiwiki's `.perlcriticrc`
- Add `ikiwiki-import.in` to the build
- Run `make test`
